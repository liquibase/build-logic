name: Attach Artifact to Release

on:
  workflow_call:
    inputs:
      zip:
        description: 'Specify it if you want to attach a zip file to the release'
        required: false
        default: 'false'
        type: string
    secrets:
      BOT_TOKEN:
        description: 'BOT_TOKEN from the caller workflow'
        required: true
      GPG_SECRET:
        description: 'GPG_SECRET from the caller workflow'
        required: true
      GPG_PASSPHRASE:
        description: 'GPG_PASSPHRASE from the caller workflow'
        required: true

jobs:
  attach-to-release:
    name: Attach Artifact to Release
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - run: sleep 30
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'maven'

      - name: Get Reusable Script Files
        run: |
          curl -o $PWD/.github/get_draft_release.sh https://raw.githubusercontent.com/liquibase/build-logic/v0.4.1/.github/get_draft_release.sh
          curl -o $PWD/.github/sign_artifact.sh https://raw.githubusercontent.com/liquibase/build-logic/v0.4.1/.github/sign_artifact.sh
          curl -o $PWD/.github/upload_asset.sh https://raw.githubusercontent.com/liquibase/build-logic/v0.4.1/.github/upload_asset.sh
          chmod +x $PWD/.github/get_draft_release.sh
          chmod +x $PWD/.github/sign_artifact.sh
          chmod +x $PWD/.github/upload_asset.sh

      - name: Configure Git
        run: |
          git config user.name "liquibot"
          git config user.email "liquibot@liquibase.org"

      - name: Build release artifacts
        id: build-release-artifacts
        run: |
          mvn -B release:clean release:prepare -Dusername=liquibot -Dpassword=$GITHUB_TOKEN -Darguments="-Dmaven.javadoc.skip=true -Dmaven.test.skipTests=true -Dmaven.test.skip=true -Dmaven.deploy.skip=true" -DreleaseVersion=${{ github.event.inputs.liquibaseVersion }} -DpushChanges=false
          git reset HEAD~ --hard
          mvn clean install -DskipTests

      - name: Get Artifact ID
        id: get-artifact-id
        run: echo "artifact_id=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)" >> $GITHUB_ENV

      - name: Get Release Tag
        id: get-release-tag
        run: echo "release_tag=$(./.github/get_draft_release.sh TAG)" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Delete Outdated Files from Draft Release
        id: delete-outdated-release-asset
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.BOT_TOKEN }}
          tag: ${{ env.release_tag }}
          fail-if-no-assets: false
          fail-if-no-release: false
          assets: '*.*'

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_SECRET }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Sign Files for Draft Release
        run: |
          gpg -K
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          ./.github/sign_artifact.sh ./target/${{ env.artifact_id }}-${version}.jar
          ./.github/sign_artifact.sh ./target/${{ env.artifact_id }}-${version}.pom
          ./.github/sign_artifact.sh ./target/${{ env.artifact_id }}-${version}-javadoc.jar
          ./.github/sign_artifact.sh ./target/${{ env.artifact_id }}-${version}-sources.jar

      - name: Attach Files to Draft Release
        id: upload-release-asset
        run: ./.github/upload_asset.sh $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
          ASSET_NAME_PREFIX: "${{ env.artifact_id }}-"
          ASSET_DIR: ./target

      - name: Get upload_zip.sh Script File
        if: inputs.zip == 'true'
        run: |
          curl -o $PWD/.github/upload_zip.sh https://raw.githubusercontent.com/liquibase/build-logic/v0.4.1/.github/upload_zip.sh
          chmod +x $PWD/.github/upload_zip.sh
  
      - name: Attach Zip File to Draft Release
        if: inputs.zip == 'true'
        id: upload-release-zip
        run: ./.github/upload_zip.sh $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
          ASSET_NAME_PREFIX: "${{ env.artifact_id }}-"
          ASSET_DIR: ./target
