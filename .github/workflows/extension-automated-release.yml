name: Automated Extension Release

on:
  workflow_call:
    inputs:
      version:
        description: "Version to release (4.26.0, 4.26.1, etc.)"
        required: true
        type: string
      repositories:
        description: "Comma separated list of repositories to release"
        required: false
        default: '["liquibase-bigquery","liquibase-cache","liquibase-cassandra","liquibase-cosmosdb","liquibase-db2i","liquibase-filechangelog","liquibase-nochangeloglock","liquibase-hanadb","liquibase-maxdb","liquibase-modify-column","liquibase-mssql","liquibase-oracle","liquibase-postgresql","liquibase-redshift","liquibase-sqlfire","liquibase-teradata","liquibase-vertica","liquibase-yugabytedb","liquibase-hibernate","liquibase-parent-pom","liquibase-cdi","liquibase-cdi-jakarta"]'
        type: string

permissions:
  contents: write
  security-events: read
  packages: write
  id-token: write

jobs:
  check-security-vulnerabilities:
    # 1. Parse the input repositories into an array.
    # 2. Initialize a flag to track if there are security vulnerabilities.
    # 3. Check for open Dependabot security alerts.
    # 4. Print the status of security vulnerabilities for each repository.
    # 5. Set the flag if security vulnerabilities are found in any repository.
    # 6. If security vulnerabilities are found in any repository, print an error message and exit with an error code.
    runs-on: ubuntu-latest
    name: Check Security Vulnerabilities
    strategy:
      fail-fast: false # Continue running jobs even if one fails
      matrix:
        repository: ${{ fromJson(inputs.repositories) }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true

      - name: Get GitHub App token
        id: get-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ env.LIQUIBASE_GITHUB_APP_ID }}
          private-key: ${{ env.LIQUIBASE_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ matrix.repository }}

      - name: Security
        env:
          REPOSITORY: ${{ matrix.repository }}
        run: |
          security_fail=false
          echo "INFO: Checking repository: $REPOSITORY"
          security_url="https://api.github.com/repos/liquibase/$REPOSITORY/dependabot/alerts?state=open"
          response=$(curl -s -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" -H "Authorization: Bearer ${{ steps.get-token.outputs.token }}" $security_url | jq length)
          echo "INFO: Open Alerts: $response"
          if [[ $response == "0" ]]; then
            echo "INFO: Security vulnerabilities for $REPOSITORY are addressed."
          else
            echo "ERROR: Security vulnerabilities for $REPOSITORY are not addressed."
            security_fail=true
          fi
          if [[ $security_fail == true ]]; then
            echo "ERROR: Security vulnerabilities are not addressed for $REPOSITORY"
            exit 1
          fi

  run-extensions-dependabot:
    needs: check-security-vulnerabilities
    runs-on: ubuntu-latest
    name: Dependabot
    strategy:
      matrix:
        repository: ${{ fromJson(inputs.repositories) }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true

      - name: Get GitHub App token
        id: get-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ env.LIQUIBASE_GITHUB_APP_ID }}
          private-key: ${{ env.LIQUIBASE_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ matrix.repository }}
          
      - name: Install Dependabot CLI
        env:
          GH_TOKEN: ${{ steps.get-token.outputs.token }}
        run: |
          echo "INFO: Installing Dependabot CLI"
          gh release download --repo dependabot/cli -p "*linux-amd64.tar.gz"
          tar xzvf *.tar.gz >/dev/null 2>&1
          chmod +x dependabot
          sudo mv dependabot /usr/local/bin
          dependabot --version
          echo "INFO: Dependabot CLI installed successfully"

      # https://github.com/dependabot/cli?tab=readme-ov-file#dependabot-update
      - name: Run dependabot on extension
        env:
          LOCAL_GITHUB_ACCESS_TOKEN: ${{ steps.get-token.outputs.token }}
          REPOSITORY: ${{ matrix.repository }}
        run: |
          echo "INFO: Running Dependabot on repository: $REPOSITORY"
          dependabot update maven "liquibase/$REPOSITORY"
          echo "INFO: Dependabot update completed for $REPOSITORY"

  update-pom:
    needs: check-security-vulnerabilities
    runs-on: ubuntu-latest
    name: Update pom.xml
    strategy:
      matrix:
        repository: ${{ fromJson(inputs.repositories) }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true

      - name: Get GitHub App token
        id: get-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ env.LIQUIBASE_GITHUB_APP_ID }}
          private-key: ${{ env.LIQUIBASE_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ matrix.repository }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: "liquibase/${{ matrix.repository }}"
          token: ${{ steps.get-token.outputs.token }}

      - name: Set up Git
        run: |
          git config --unset-all http.https://github.com/.extraheader
          git config --local user.email "64099989+liquibot@users.noreply.github.com"
          git config --local user.name "liquibot"

      # look for dependencies in maven
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v22
        with:
          repositories: |
            [
              {
                "id": "liquibase",
                "url": "https://maven.pkg.github.com/liquibase/liquibase",
                "releases": {
                  "enabled": "true"
                },
                "snapshots": {
                  "enabled": "true",
                  "updatePolicy": "always"
                }
              },
              {
                "id": "liquibase-pro",
                "url": "https://maven.pkg.github.com/liquibase/liquibase-pro",
                "releases": {
                  "enabled": "true"
                },
                "snapshots": {
                  "enabled": "true",
                  "updatePolicy": "always"
                }
              }
            ]
          servers: |
            [
              {
                "id": "liquibase-pro",
                "username": "liquibot",
                "password": "${{ env.LIQUIBOT_PAT_GPM_ACCESS }}"
              },
              {
                "id": "liquibase",
                "username": "liquibot",
                "password": "${{ env.LIQUIBOT_PAT_GPM_ACCESS }}"
              }
            ]

      - name: Update extension version to next SNAPSHOT
        if: ${{ matrix.repository != 'liquibase-parent-pom' }}
        run: |
          echo "INFO: Updating extension version to ${{ inputs.version }}-SNAPSHOT"
          mvn versions:set -DnewVersion=${{ inputs.version }}-SNAPSHOT
          echo "INFO: Extension version updated"

      - name: Update pom.xml
        run: |
          echo "INFO: Updating liquibase.version in pom.xml to ${{ inputs.version }}"
          sed -i "s/<liquibase.version>.*<\/liquibase.version>/<liquibase.version>${{ inputs.version }}<\/liquibase.version>/" pom.xml
          git add pom.xml
          # Check if there are changes before committing
          if git diff-index --quiet HEAD --; then
            echo "INFO: No changes to commit."
          else
            git commit -m "Update liquibase.version to ${{ inputs.version }}"
            git remote set-url origin https://x-access-token:${{ steps.get-token.outputs.token }}@github.com/liquibase/${{ matrix.repository }}.git
            git push
            echo "INFO: Changes committed and pushed successfully"
          fi

  release-draft-releases:
    # 1. Initialize a flag to track if the specified version is found.
    # 2. If draft releases are found, check if they contain the specified version to release.
    # 3. If the version is found publish it as the latest release.
    # 4. Print relevant information about the process.
    needs: update-pom
    runs-on: ubuntu-latest
    name: Release Draft
    strategy:
      matrix:
        repository: ${{ fromJson(inputs.repositories) }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true

      - name: Get GitHub App token
        id: get-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ env.LIQUIBASE_GITHUB_APP_ID }}
          private-key: ${{ env.LIQUIBASE_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ matrix.repository }}
          permission-contents: write
          
      - name: Check for Artifact in Draft Releases
        run: |
          echo "INFO: Waiting for artifacts to be available..."
          sleep 180
          published_drafts_file=published_drafts.txt
          found=false
          echo "INFO: Checking repository: ${{ matrix.repository }}"
          assets=$(curl -s -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" -H "Authorization: Bearer ${{ steps.get-token.outputs.token }}" "https://api.github.com/repos/liquibase/${{ matrix.repository }}/releases" | jq -r '.[] | select(.draft == true)' | jq -r '.assets[]')
          echo "INFO: Assets: $assets"
          # check if assests are empty
          if [ -z "$assets" ]; then
            echo "WARNING: No assets found"
          else
            if echo "$assets" | jq -e '.name | contains("${{ inputs.version }}")' > /dev/null; then
              found=true
              echo "INFO: Found an asset containing '${{ inputs.version }}'"
            else
              echo "WARNING: No asset containing '${{ inputs.version }}' found"
            fi
            if [ "$found" = true ] ; then
              # Get the draft release ID
              RELEASE_ID=$(curl -s -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" -H "Authorization: Bearer ${{ steps.get-token.outputs.token }}" "https://api.github.com/repos/liquibase/${{ matrix.repository }}/releases" | jq -r '[.[] | select(.draft == true)] | sort_by(.created_at) | last | .id')
              echo "INFO: Newest Draft release ID: $RELEASE_ID"
              RELEASE_TITLE="v${{ inputs.version }}"
              # Publish the draft release as the latest release
              echo "INFO: Publishing the draft release as the latest release to https://api.github.com/repos/liquibase/${{ matrix.repository }}/releases/$RELEASE_ID"
              curl -s -X PATCH -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" -H "Authorization: Bearer ${{ steps.get-token.outputs.token }}" -d '{"draft": false}' "https://api.github.com/repos/liquibase/${{ matrix.repository }}/releases/$RELEASE_ID"
              echo "INFO: Draft release published as the latest release for ${{ matrix.repository }}"
              echo "${{ matrix.repository }}: v${{ inputs.version }}" >> $published_drafts_file
            else
              echo "WARNING: No artifact containing '${{ inputs.version }}' found in the last draft release."
            fi
          fi

  publish-to-central-portal:
    # 1. This job uses the new Central Portal API to automatically publish extension artifacts.
    # 2. It downloads artifacts from published GitHub releases and creates Maven bundles.
    # 3. Each bundle is uploaded to Central Portal with AUTOMATIC publishing type.
    # 4. The job tracks successful uploads and automatically publishes to Maven Central.
    needs: release-draft-releases
    runs-on: ubuntu-latest
    name: Central Portal
    strategy:
      matrix:
        repository: ${{ fromJson(inputs.repositories) }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true

      - name: Get GitHub App token
        id: get-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ env.LIQUIBASE_GITHUB_APP_ID }}
          private-key: ${{ env.LIQUIBASE_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ matrix.repository }}

      - name: Wait for GitHub releases to be available
        run: |
          echo "INFO: Waiting for GitHub releases to be available..."
          sleep 120

      - name: Check for published release and download artifacts
        id: download-artifacts
        env:
          VERSION: ${{ inputs.version }}
          TOKEN: ${{ steps.get-token.outputs.token }}
          REPOSITORY: ${{ matrix.repository }}
        run: |
          echo "INFO: Checking repository: $REPOSITORY"
          
          # Get the latest published release for this version
          RELEASE_DATA=$(curl -s -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" -H "Authorization: Bearer $TOKEN" "https://api.github.com/repos/liquibase/$REPOSITORY/releases/tags/v$VERSION")
          
          # Check if release exists and is published
          if echo "$RELEASE_DATA" | jq -e '.draft == false' > /dev/null; then
            echo "INFO: Found published release v$VERSION for $REPOSITORY"
            
            # Create working directory
            mkdir -p artifacts
            cd artifacts
            
            # Download all assets from the release
            ASSETS=$(echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name | test("\\.(jar|pom|asc|md5|sha1)$")) | .browser_download_url')
            
            if [ -z "$ASSETS" ]; then
              echo "WARNING: No artifacts found in release"
              echo "has_artifacts=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            echo "INFO: Downloading artifacts..."
            for asset_url in $ASSETS; do
              echo "INFO: Downloading: $asset_url"
              curl -L -H "Authorization: Bearer $TOKEN" -o "$(basename "$asset_url")" "$asset_url"
            done
            
            # Get artifact info from pom file
            POM_FILE=$(ls *.pom | head -1)
            if [ -f "$POM_FILE" ]; then
              # Extract groupId and artifactId from POM
              GROUP_ID=$(grep -oP '<groupId>\K[^<]+' "$POM_FILE" | head -1)
              ARTIFACT_ID=$(grep -oP '<artifactId>\K[^<]+' "$POM_FILE" | head -1)
              
              echo "GROUP_ID=$GROUP_ID" >> $GITHUB_OUTPUT
              echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_OUTPUT
              echo "has_artifacts=true" >> $GITHUB_OUTPUT
              
              echo "INFO: Found artifacts for $GROUP_ID:$ARTIFACT_ID:$VERSION"
            else
              echo "WARNING: No POM file found"
              echo "has_artifacts=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "WARNING: No published release found for v$VERSION"
            echo "has_artifacts=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and upload bundle to Central Portal
        if: steps.download-artifacts.outputs.has_artifacts == 'true'
        run: |
          cd artifacts
          
          GROUP_ID="${{ steps.download-artifacts.outputs.GROUP_ID }}"
          ARTIFACT_ID="${{ steps.download-artifacts.outputs.ARTIFACT_ID }}"
          VERSION="${{ inputs.version }}"
          
          echo "INFO: Creating Maven bundle for ${ARTIFACT_ID}-${VERSION}"
          
          # Create Maven repository layout structure for the bundle
          GROUP_PATH=$(echo "$GROUP_ID" | tr '.' '/')
          mkdir -p "bundle/${GROUP_PATH}/${ARTIFACT_ID}/${VERSION}"
          
          # Copy all artifacts to proper Maven repository layout
          cp ${ARTIFACT_ID}-${VERSION}* "bundle/${GROUP_PATH}/${ARTIFACT_ID}/${VERSION}/"
          
          # Create the bundle zip file
          cd bundle
          zip -r ../central-bundle.zip .
          cd ..
          
          echo "INFO: Maven bundle created successfully"
          
          # Create base64 encoded credentials for Bearer auth
          AUTH_HEADER=$(printf "%s:%s" "${{ env.SONATYPE_USERNAME }}" "${{ env.SONATYPE_TOKEN }}" | base64 -w 0)
          
          # Upload bundle to Central Portal with AUTOMATIC publishing
          echo "INFO: Uploading bundle to Sonatype Central Portal for ${ARTIFACT_ID}-${VERSION}..."
          UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" \
            -X POST \
            -H "Authorization: Bearer ${AUTH_HEADER}" \
            -F "bundle=@central-bundle.zip" \
            "https://central.sonatype.com/api/v1/publisher/upload?publishingType=AUTOMATIC&name=${ARTIFACT_ID}-${VERSION}")
          
          # Parse response
          HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | tail -n1)
          DEPLOYMENT_ID=$(echo "$UPLOAD_RESPONSE" | head -n1)
          
          echo "INFO: HTTP Status: $HTTP_CODE"
          echo "INFO: Deployment ID: $DEPLOYMENT_ID"
          
          if [ "$HTTP_CODE" != "201" ]; then
            echo "ERROR: Upload failed with HTTP status $HTTP_CODE"
            echo "ERROR: Response: $DEPLOYMENT_ID"
            exit 1
          fi
          
          echo "INFO: Bundle uploaded successfully to Central Portal"
          echo "INFO: Deployment ID: $DEPLOYMENT_ID"
          echo "INFO: Automatic publishing initiated for ${ARTIFACT_ID}-${VERSION}"
          
          # Track successful upload
          echo "${{ matrix.repository }}: ${ARTIFACT_ID}-${VERSION} (${DEPLOYMENT_ID})" >> ../published_extensions.txt

      - name: Archive published extensions
        uses: actions/upload-artifact@v4
        with:
          name: published-extensions-${{ matrix.repository }}
          path: published_extensions.txt
          if-no-files-found: ignore
