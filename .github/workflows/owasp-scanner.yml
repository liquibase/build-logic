name: OWASP Scanner

on:
  workflow_call:
    inputs:
      repository:
        description: 'Repository to scan'
        required: false
        type: string
        default: 'liquibase'
      branch:
        description: 'Branch to scan'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      repository:
        description: 'Repository to scan'
        required: false
        type: string
        default: 'liquibase'
      branch:
        description: 'Branch to scan'
        required: true
        type: string

permissions:
  contents: read
  packages: read
  id-token: write

jobs:
  scan:
    runs-on: ubuntu-22.04
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true

      - name: Get GitHub App token
        if: inputs.repository == 'liquibase-pro'
        id: get-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ env.LIQUIBASE_GITHUB_APP_ID }}
          private-key: ${{ env.LIQUIBASE_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: liquibase/${{ inputs.repository }}
          ref: ${{ inputs.branch }}
          path: ${{ inputs.repository }}
          submodules: ${{ inputs.repository == 'liquibase-pro' && 'true' || 'false' }}
          token: ${{ inputs.repository == 'liquibase-pro' && steps.get-token.outputs.token || github.token }}

      - name: Set up Java for publishing to GitHub Repository
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v22
        with:
          repositories: |
            [
              {
                "id": "liquibase",
                "url": "https://maven.pkg.github.com/liquibase/liquibase",
                "releases": {
                  "enabled": "true"
                },
                "snapshots": {
                  "enabled": "true",
                  "updatePolicy": "always"
                }
              },
              {
                "id": "liquibase-pro",
                "url": "https://maven.pkg.github.com/liquibase/liquibase-pro",
                "releases": {
                  "enabled": "true"
                },
                "snapshots": {
                  "enabled": "true",
                  "updatePolicy": "always"
                }
              }
            ]
          servers: |
            [
              {
                "id": "liquibase-pro",
                "username": "liquibot",
                "password": "${{ env.LIQUIBOT_PAT_GPM_ACCESS }}"
              },
              {
                "id": "liquibase",
                "username": "liquibot",
                "password": "${{ env.LIQUIBOT_PAT_GPM_ACCESS }}"
              }
            ]

      - name: Build liquibase-pro dependencies
        if: inputs.repository == 'liquibase-pro'
        run: |
          cd ${{ inputs.repository }}
          # Build using pom-pro-distribution.xml which includes all dependencies
          mvn -B -f pom-pro-distribution.xml clean install -DskipTests -P '!oss,!obfuscate,!run-proguard'

      - name: Build project (non-pro repositories)
        if: inputs.repository != 'liquibase-pro'
        run: |
          cd ${{ inputs.repository }}
          mvn clean install -DskipTests

      - name: Run the scanner
        id: run_owasp
        run: |
          cd ${{ inputs.repository }}
          mvn org.owasp:dependency-check-maven:aggregate -DnvdApiKey=${{ env.NVD_API_KEY }} -DfailOnError=true
    
      - name: Upload OWASP Dependency-Check results
        if: always()
        uses: actions/upload-artifact@v4
        with:
            name: owasp-dependency-check
            path: ${{ inputs.repository }}/target/dependency-check-report.html
  
