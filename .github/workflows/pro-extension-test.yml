name: Build and Test Pro Extension

on:
  workflow_call:
    inputs:
      java:
        description: "Java version to test"
        required: false
        default: "[11, 17, 21]"
        type: string
      os:
        description: "Operating system to build/test on"
        required: false
        default: '["ubuntu-latest", "windows-latest"]'
        type: string
      os-test:
        description: "Operating system to test on"
        required: false
        default: '["ubuntu-latest", "windows-latest"]'
        type: string
      nightly:
        description: "Specifies nightly builds against liquibase master-SNAPSHOT"
        required: false
        default: false
        type: boolean
      extraCommand:
        description: "Specify it if you want to run an extra command before attaching the artifact. This runs on both Linux and Windows runners."
        required: false
        default: ""
        type: string
      extraLinuxCommand:
        description: "Specify it if you want to run an extra command before attaching the artifact on Linux."
        required: false
        default: ""
        type: string
      extraWindowsCommand:
        description: "Specify it if you want to run an extra command before attaching the artifact on Windows."
        required: false
        default: ""
        type: string
      extraMavenArgs:
        description: "Specify it if you want to run an extra maven argument"
        required: false
        default: ""
        type: string
      mavenProfiles:
        description: "Specify it if you want to run different Maven profiles from the default (coverage).  mavenProfiles example: 'coverage,run-proguard'"
        required: false
        default: "coverage"
        type: string
      artifactPath:
        description: "Specify the path to the artifacts that should be attached to the build. Useful for multi-module extensions."
        required: false
        default: "."
        type: string
      combineJars:
        description: "Specify it if you want to combine the built jars into a single jar"
        required: false
        default: false
        type: boolean
      vaultAddr:
        description: "Hashicorp Vault server address"
        required: false
        default: ""
        type: string
      vaultNamespace:
        description: "Hashicorp Vault namespace"
        required: false
        default: ""
        type: string
      vaultToken:
        description: "Hashicorp Vault token"
        required: false
        default: ""
        type: string

    secrets:
      SONAR_TOKEN:
        description: "SONAR_TOKEN from the caller workflow"
        required: true
      PRO_LICENSE_KEY:
        description: "PRO_LICENSE_KEY from the caller workflow"
        required: true
      AWS_GITHUB_OIDC_ROLE_ARN_S3_GHA:
        description: "OIDC Role from the caller workflow"
        required: true
      AZURE_TENANT_ID:
        description: "Azure Active Directory (AD) tenant ID."
        required: false
      AZURE_CLIENT_SECRET:
        description: "Secret key for Azure authentication."
        required: false
      AZURE_CLIENT_ID:
        description: "Client ID for Azure service authentication."
        required: false
      LIQUIBASE_AZURE_STORAGE_ACCOUNT:
        description: "Azure Storage Account name for Liquibase."
        required: false

permissions:
  contents: write
  id-token: write
  packages: read
  pull-requests: write

env:
  AWS_REGION: us-east-1
  LIQUIBASE_PRO_LICENSE_KEY: ${{ secrets.PRO_LICENSE_KEY }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  LIQUIBASE_AZURE_STORAGE_ACCOUNT: ${{ secrets.LIQUIBASE_AZURE_STORAGE_ACCOUNT }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  MAVEN_VERSION: "3.9.5"
  LIQUIBASE_VAULT_ADDR: ${{ inputs.vaultAddr }}
  LIQUIBASE_VAULT_NAMESPACE: ${{ inputs.vaultNamespace }}
  LIQUIBASE_VAULT_TOKEN: ${{ inputs.vaultToken }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: ${{fromJson(inputs.os || '["ubuntu-latest"]')}}
    name: Build & Package - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: write # Updated from 'read' to 'write' to allow tag operations
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_OIDC_ROLE_ARN_S3_GHA }}
          aws-region: us-east-1

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"
          cache: "maven"

      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}

      # look for dependencies in maven
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v22
        with:
          repositories: |
            [
              {
                "id": "liquibase",
                "url": "https://maven.pkg.github.com/liquibase/liquibase",
                "releases": {
                  "enabled": "true"
                },
                "snapshots": {
                  "enabled": "true",
                  "updatePolicy": "always"
                }
              },
              {
                "id": "liquibase-pro",
                "url": "https://maven.pkg.github.com/liquibase/liquibase-pro",
                "releases": {
                  "enabled": "true"
                },
                "snapshots": {
                  "enabled": "true",
                  "updatePolicy": "always"
                }
              }
            ]
          servers: |
            [
              {
                "id": "liquibase-pro",
                "username": "liquibot",
                "password": "${{ secrets.LIQUIBOT_PAT_GPM_ACCESS }}"
              },
              {
                "id": "liquibase",
                "username": "liquibot",
                "password": "${{ secrets.LIQUIBOT_PAT_GPM_ACCESS }}"
              }
            ]

      - name: Run extra command
        if: inputs.extraCommand != ''
        run: |
          ${{ inputs.extraCommand }}

      - name: Run extra Linux command
        if: inputs.extraLinuxCommand != '' && runner.os == 'Linux'
        shell: bash
        run: |
          ${{ inputs.extraLinuxCommand }}

      - name: Run extra Windows Command
        if: inputs.extraWindowsCommand != '' && runner.os == 'Windows'
        shell: powershell
        run: |
          ${{ inputs.extraWindowsCommand }}

      - name: Build and Package latest liquibase version
        if: ${{ inputs.nightly }}
        shell: bash
        run: mvn -B dependency:go-offline clean package -DskipTests=true "-Dliquibase.version=master-SNAPSHOT"

      - name: Notify Slack on Build Failure
        if: ${{ failure() && inputs.nightly }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: "View details on GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} <@U042HRTL4DT>"
          SLACK_TITLE: "❌ ${{ github.repository }} ❌ Build failed on branch ${{ github.ref }} for commit ${{ github.sha }} in repository ${{github.repository}}"
          SLACK_USERNAME: liquibot
          SLACK_WEBHOOK: ${{ secrets.NIGHTLY_BUILDS_SLACK_WEBHOOK }}
          SLACK_ICON_EMOJI: ":robot_face:"
          SLACK_FOOTER: "${{ github.repository }}"
          SLACK_LINK_NAMES: true

      - name: Build and Package
        if: ${{ !inputs.nightly }}
        shell: bash
        run: |
          if [ -n "${{ inputs.extraMavenArgs }}" ]; then
            mvn -B dependency:go-offline clean package -DskipTests=true ${{ inputs.extraMavenArgs }}
          else
            mvn -B dependency:go-offline clean package -DskipTests=true
          fi

      - name: Get Artifact ID
        working-directory: ${{ inputs.artifactPath }}
        id: get-artifact-id
        shell: bash
        run: echo "::set-output name=artifact_id::$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)"

      - name: Get Artifact Version
        working-directory: ${{ inputs.artifactPath }}
        id: get-artifact-version
        shell: bash
        run: echo "::set-output name=artifact_version::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"

      - name: Save Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get-artifact-id.outputs.artifact_id }}-${{ matrix.os }}-${{ steps.get-artifact-version.outputs.artifact_version }}-artifacts
          path: |
            ${{ inputs.artifactPath }}/target/*

      - name: Save Event File
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: ${{ steps.get-artifact-id.outputs.artifact_id }}-${{ matrix.os }}-${{ steps.get-artifact-version.outputs.artifact_version }}-events
          path: ${{ github.event_path }}

      - name: Save Artifacts for Ubuntu Latest to be used for GPM publishing
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get-artifact-id.outputs.artifact_id }}-artifacts
          path: |
            target/*

    outputs:
      artifact_id: ${{ steps.get-artifact-id.outputs.artifact_id }}
      artifact_version: ${{ steps.get-artifact-version.outputs.artifact_version }}

  unit-test:
    strategy:
      fail-fast: false
      matrix:
        java: ${{fromJson(inputs.java || '[8, 11, 17, 18]')}}
        os: ${{fromJson(inputs.os-test || '["ubuntu-latest", "windows-latest"]')}}
    name: Test Java ${{ matrix.java }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: "temurin"
          cache: "maven"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_OIDC_ROLE_ARN_S3_GHA }}
          aws-region: us-east-1

      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}

      # look for dependencies in maven
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v22
        with:
          repositories: |
            [
              {
                "id": "liquibase",
                "url": "https://maven.pkg.github.com/liquibase/liquibase",
                "releases": {
                  "enabled": "true"
                },
                "snapshots": {
                  "enabled": "true",
                  "updatePolicy": "always"
                }
              },
              {
                "id": "liquibase-pro",
                "url": "https://maven.pkg.github.com/liquibase/liquibase-pro",
                "releases": {
                  "enabled": "true"
                },
                "snapshots": {
                  "enabled": "true",
                  "updatePolicy": "always"
                }
              }
            ]
          servers: |
            [
              {
                "id": "liquibase-pro",
                "username": "liquibot",
                "password": "${{ secrets.LIQUIBOT_PAT_GPM_ACCESS }}"
              },
              {
                "id": "liquibase",
                "username": "liquibot",
                "password": "${{ secrets.LIQUIBOT_PAT_GPM_ACCESS }}"
              }
            ]

      - uses: actions/download-artifact@v4
        with:
          name: ${{needs.build.outputs.artifact_id}}-${{ matrix.os }}-${{needs.build.outputs.artifact_version}}-artifacts
          path: ./target

      - name: Run extra command
        if: inputs.extraCommand != ''
        run: |
          ${{ inputs.extraCommand }}

      - name: Run extra Linux command
        if: inputs.extraLinuxCommand != '' && runner.os == 'Linux'
        run: |
          ${{ inputs.extraLinuxCommand }}

      - name: Run extra Windows command
        if: inputs.extraWindowsCommand != '' && runner.os == 'Windows'
        run: |
          ${{ inputs.extraWindowsCommand }}

      - name: Run Tests
        if: ${{ !inputs.nightly }}
        shell: bash
        run: |
          if [ -n "${{ inputs.extraMavenArgs }}" ]; then
            mvn -B test -P '${{ inputs.mavenProfiles }}' "${{ inputs.extraMavenArgs }}"
          else
            mvn -B test -P '${{ inputs.mavenProfiles }}'
          fi

      - name: Run Tests
        if: ${{ inputs.nightly }}
        shell: bash
        run: |
          if [ -n "${{ inputs.extraMavenArgs }}" ]; then
            mvn -B test -P '${{ inputs.mavenProfiles }}' "${{ inputs.extraMavenArgs }}" "-Dliquibase.version=master-SNAPSHOT"
          else
            mvn -B test -P '${{ inputs.mavenProfiles }}' "-Dliquibase.version=master-SNAPSHOT"
          fi

      - name: Notify Slack on Build Failure
        if: ${{ failure() && inputs.nightly }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: "View details on GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} <@U042HRTL4DT>"
          SLACK_TITLE: "❌ ${{ github.repository }} ❌ Tests failed on branch ${{ github.ref }} for commit ${{ github.sha }} in repository ${{github.repository}}"
          SLACK_USERNAME: liquibot
          SLACK_WEBHOOK: ${{ secrets.NIGHTLY_BUILDS_SLACK_WEBHOOK }}
          SLACK_ICON_EMOJI: ":robot_face:"
          SLACK_FOOTER: "${{ github.repository }}"
          SLACK_LINK_NAMES: true

      - name: Archive Test Results - ${{ matrix.os }}
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-jdk-${{ matrix.java }}-${{ matrix.os }}
          path: |
            **/target/surefire-reports
            **/target/site/jacoco/jacoco.xml

  combineJars:
    needs: [build, unit-test]
    if: ${{ inputs.combineJars }}
    name: Combine Jars
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Download Ubuntu Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{needs.build.outputs.artifact_id}}-ubuntu-latest-${{needs.build.outputs.artifact_version}}-artifacts
          path: /tmp/ubuntu

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{needs.build.outputs.artifact_id}}-macos-latest-${{needs.build.outputs.artifact_version}}-artifacts
          path: /tmp/macos

      - name: Download Windows Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{needs.build.outputs.artifact_id}}-windows-latest-${{needs.build.outputs.artifact_version}}-artifacts
          path: /tmp/windows

      - name: Create multiplatform jar
        run: |
          rm -rf /tmp/combined/ubuntu /tmp/combined/windows /tmp/combined/macos
          mkdir -p /tmp/combined/ubuntu /tmp/combined/windows /tmp/combined/macos
          unzip -d /tmp/combined/ubuntu /tmp/ubuntu/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}.jar
          unzip -d /tmp/combined/windows /tmp/windows/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}.jar
          unzip -d /tmp/combined/macos /tmp/macos/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}.jar
          rm -r -f /tmp/combined/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}
          mkdir /tmp/combined/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}
          cp -a /tmp/combined/ubuntu/* /tmp/combined/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}/
          cp -a /tmp/combined/windows/* /tmp/combined/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}/
          cp -a /tmp/combined/macos/* /tmp/combined/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}/
          rm /tmp/combined/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}/org.graalvm.python.vfs/fileslist.txt
          cat /tmp/combined/ubuntu/org.graalvm.python.vfs/fileslist.txt /tmp/combined/windows/org.graalvm.python.vfs/fileslist.txt /tmp/combined/macos/org.graalvm.python.vfs/fileslist.txt > /tmp/combined/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}/org.graalvm.python.vfs/fileslist.txt
          rm -f /tmp/combined/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}.jar
          cd /tmp/combined/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}/
          zip -r ../${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}.jar *
          cd ..
          cp /tmp/ubuntu/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}-sources.jar /tmp/combined/
          cp /tmp/ubuntu/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}-javadoc.jar /tmp/combined/
          cp /tmp/ubuntu/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}.pom /tmp/combined/

      - name: Upload multiplatform artifact
        uses: actions/upload-artifact@v4
        with:
          name: multiplatform-artifacts
          path: |
            /tmp/combined/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}.jar
            /tmp/combined/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}-sources.jar
            /tmp/combined/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}-javadoc.jar
            /tmp/combined/${{needs.build.outputs.artifact_id}}-${{needs.build.outputs.artifact_version}}.pom

  sonar-pr:
    if: ${{ !inputs.nightly }}
    needs: [unit-test]
    uses: liquibase/build-logic/.github/workflows/sonar-pull-request.yml@main
    secrets: inherit
    with:
      extraCommand: ${{ inputs.extraCommand }}
      artifactPath: ${{ inputs.artifactPath }}
