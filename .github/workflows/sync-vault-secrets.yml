name: Sync Vault Secrets to GitHub Dependabot

on:
  schedule:
    # Run every 2months on 28th day of the month at 3 AM UTC
    - cron: "0 3 28 */2 *"
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: read
  id-token: write

jobs:
  sync-secrets:
    name: Sync PAT from AWS Vault to GitHub Dependabot Secrets
    runs-on: ubuntu-latest
    steps:

    - name: Configure AWS credentials for vault access
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
        aws-region: us-east-1

    - name: Get secrets from vault
      id: vault-secrets
      uses: aws-actions/aws-secretsmanager-get-secrets@v2
      with:
        secret-ids: |
          ,/vault/liquibase
        parse-json-secrets: true

    - name: Update GitHub secret
      run: |
        # Get the PAT from vault
        PAT_VALUE="${{ env.LIQUIBOT_PAT_GPM_ACCESS }}"
        
        if [ -z "$PAT_VALUE" ]; then
          echo "Error: PAT not found in vault secrets"
          exit 1
        fi
        
        # Encrypt the secret for GitHub Dependabot API
        PUBLIC_KEY_RESPONSE=$(curl -s -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/${{ github.repository }}/dependabot/secrets/public-key")
        
        PUBLIC_KEY=$(echo "$PUBLIC_KEY_RESPONSE" | jq -r '.key')
        KEY_ID=$(echo "$PUBLIC_KEY_RESPONSE" | jq -r '.key_id')
        
        if [ "$PUBLIC_KEY" = "null" ] || [ "$KEY_ID" = "null" ]; then
          echo "Error: Failed to get repository Dependabot public key"
          echo "Response: $PUBLIC_KEY_RESPONSE"
          exit 1
        fi
        
        # Install libsodium for encryption
        sudo apt-get update && sudo apt-get install -y libsodium23 libsodium-dev
        
        # Create Python script for encryption
        cat > encrypt_secret.py << 'EOF'
        import base64
        import sys
        from nacl import encoding, public
        
        def encrypt(public_key: str, secret_value: str) -> str:
            """Encrypt a Unicode string using the public key."""
            public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
            sealed_box = public.SealedBox(public_key)
            encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
            return base64.b64encode(encrypted).decode("utf-8")
        
        if __name__ == "__main__":
            public_key = sys.argv[1]
            secret = sys.argv[2]
            print(encrypt(public_key, secret))
        EOF
        
        # Install PyNaCl
        pip install PyNaCl
        
        # Encrypt the secret
        ENCRYPTED_VALUE=$(python encrypt_secret.py "$PUBLIC_KEY" "$PAT_VALUE")
        
        # Update the secret via GitHub Dependabot API
        UPDATE_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/update_response.json \
          -X PUT \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/${{ github.repository }}/dependabot/secrets/LIQUIBOT_PAT_GPM_ACCESS" \
          -d "{
            \"encrypted_value\": \"$ENCRYPTED_VALUE\",
            \"key_id\": \"$KEY_ID\"
          }")
        
        HTTP_CODE="${UPDATE_RESPONSE: -3}"
        
        if [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "204" ]; then
          echo "✅ Successfully updated LIQUIBOT_PAT_GPM_ACCESS Dependabot secret"
        else
          echo "❌ Failed to update Dependabot secret. HTTP code: $HTTP_CODE"
          echo "Response body:"
          cat /tmp/update_response.json
          exit 1
        fi
        
        # Clean up
        rm -f encrypt_secret.py /tmp/update_response.json